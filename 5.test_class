// Абстрактный суперкласс Shape
abstract class Shape {
    protected String color;
    protected boolean filled;

    // Конструктор с параметрами цвета и флага заполнения
    public Shape(String color, boolean filled) {
        this.color = color;
        this.filled = filled;
    }

    // Геттер и сеттер для цвета
    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    // Геттер и сеттер для флага заполнения
    public boolean isFilled() {
        return filled;
    }

    public void setFilled(boolean filled) {
        this.filled = filled;
    }

    // Абстрактные методы для вычисления площади и периметра
    public abstract double getArea();

    public abstract double getPerimeter();

    // Переопределение метода toString() для удобного вывода информации о фигуре
    @Override
    public String toString() {
        return "Shape[color=" + color + ", filled=" + filled + "]";
    }
}

// Подкласс Circle (круг)
class Circle extends Shape {
    private double radius;  // Радиус круга

    // Конструктор с параметрами радиуса, цвета и флага заполнения
    public Circle(double radius, String color, boolean filled) {
        super(color, filled);
        this.radius = radius;
    }

    // Переопределение метода для вычисления площади круга
    @Override
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Переопределение метода для вычисления периметра круга
    @Override
    public double getPerimeter() {
        return 2 * Math.PI * radius;
    }

    // Геттер для радиуса
    public double getRadius() {
        return radius;
    }

    // Переопределение метода toString() для удобного вывода информации о круге
    @Override
    public String toString() {
        return "Circle[" + super.toString() + ", radius=" + radius + "]";
    }
}

// Подкласс Rectangle (прямоугольник)
class Rectangle extends Shape {
    private double width;  // Ширина прямоугольника
    private double length;  // Длина прямоугольника

    // Конструктор с параметрами ширины, длины, цвета и флага заполнения
    public Rectangle(double width, double length, String color, boolean filled) {
        super(color, filled);
        this.width = width;
        this.length = length;
    }

    // Переопределение метода для вычисления площади прямоугольника
    @Override
    public double getArea() {
        return width * length;
    }

    // Переопределение метода для вычисления периметра прямоугольника
    @Override
    public double getPerimeter() {
        return 2 * (width + length);
    }

    // Геттер для длины
    public double getLength() {
        return length;
    }

    // Переопределение метода toString() для удобного вывода информации о прямоугольнике
    @Override
    public String toString() {
        return "Rectangle[" + super.toString() + ", width=" + width + ", length=" + length + "]";
    }
}

// Подкласс Square (квадрат), наследующийся от Rectangle
class Square extends Rectangle {
    // Конструктор с параметром стороны, вызывает конструктор родительского класса с одинаковой шириной и длиной
    public Square(double side, String color, boolean filled) {
        super(side, side, color, filled);
    }

    // Переопределение метода для удобного вывода информации о квадрате
    @Override
    public String toString() {
        return "Square[" + super.toString() + "]";
    }
}

public class Main {
    public static void main(String[] args) {
        // Создание объектов и демонстрация полиморфизма
        Shape s1 = new Circle(5.5, "RED", false);
        System.out.println(s1);
        System.out.println("Area: " + s1.getArea());
        System.out.println("Perimeter: " + s1.getPerimeter());
        System.out.println("Color: " + s1.getColor());
        System.out.println("Filled: " + s1.isFilled());

        Circle c1 = (Circle) s1;
        System.out.println(c1);
        System.out.println("Area: " + c1.getArea());
        System.out.println("Perimeter: " + c1.getPerimeter());
        System.out.println("Color: " + c1.getColor());
        System.out.println("Filled: " + c1.isFilled());
        System.out.println("Radius: " + c1.getRadius());

        Shape s2 = new Rectangle(1.0, 2.0, "RED", false);
        System.out.println(s2);
        System.out.println("Area: " + s2.getArea());
        System.out.println("Perimeter: " + s2.getPerimeter());
        System.out.println("Color: " + s2.getColor());

        Rectangle r1 = (Rectangle) s2;
        System.out.println(r1);
        System.out.println("Area: " + r1.getArea());
        System.out.println("Color: " + r1.getColor());
        System.out.println("Length: " + r1.getLength());

        Shape s3 = new Square(6.6, "BLUE", true);
        System.out.println(s3);
        System.out.println("Area: " + s3.getArea());
        System.out.println("Color: " + s3.getColor());

        Square sq1 = (Square) s3;
        System.out.println(sq1);
        System.out.println("Area: " + sq1.getArea());
        System.out.println("Color: " + sq1.getColor());
    }
}
